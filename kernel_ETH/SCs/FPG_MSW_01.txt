pragma solidity ^0.6.11;


/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
/// @author Stefan George - <stefan.george@consensys.net>
contract MultiSigWallet {

    /*
     *  Events
     */
    event Confirmation(address indexed sender, uint indexed transactionId);
    event Revocation(address indexed sender, uint indexed transactionId);
    event Submission(uint indexed transactionId);
    event Execution(uint indexed transactionId);
    event ExecutionFailure(uint indexed transactionId);
    event Deposit(address indexed sender, uint value);
    event Receive(address indexed sender, uint value, uint value1);
    event OwnerAddition(address indexed owner);
    event OwnerRemoval(address indexed owner);
    event RequirementChange(uint required);

    //event TokenAddition(address indexed token);
    event TokenAddition(bytes32 tkname, bytes32 tklink, address indexed token);
    event TokenRemoval(bytes32 tkname, bytes32 tklink, address indexed token);
    event SubmissionSubTransaction(uint indexed currentTC);
    
    
    
    
    event PairedWith(uint myTransId, MultiSigWallet trader, uint traderTransactionId);
    event HadPairedWith(uint myTransId, MultiSigWallet trader, uint traderTransactionId);
    
    event Print(uint indexed i);
    event Print(bool batch, uint indexed i);
    event Print(address destination, uint value);
    event Print(bytes32 tid, uint transactionId);
    
    event Print(bytes32 message, address by);
    event Print(bytes32 message, MultiSigWallet by);
    event Print(bytes32 message, bool addressEq);

    /*
     *  Constants
     */
    uint constant public MAX_OWNER_COUNT = 50;
    uint constant public MAX_SUBTRAN_COUNT = 20;

    /*
     *  Storage
     */
    mapping (uint => Transaction) public transactions;
    mapping (uint => Transaction[MAX_SUBTRAN_COUNT]) public transactionBatch;
    mapping (uint => mapping (address => bool)) public confirmations;
    mapping (address => bool) public isOwner;
    address[] public owners;
    
    
    //mapping (address => bool) public hasToken;
    //address[] internal tokens;
    struct Token{
        bytes32 tokenSymbol;
        bytes32 tklink;
        address tokenAddress;
        bool active;
    }
    mapping (bytes32 => bool) public hasToken;
    mapping(bytes32 => Token) internal tokens;
    bytes32[] internal tokenNames;
    
    bytes32 public version;
    address public creator;
    


    
    uint public required;
    uint public transactionCount = 1;
    mapping(uint => uint) public currentTC;
    
    
    
    mapping(uint => bool) public confirmable;
    mapping(uint => uint) public tradePairId;
    mapping(uint => MultiSigWallet) public tradePairAddress;
    mapping(uint => bool) public isPaired;
    mapping(uint => bool) public isTrade;
    mapping(uint => bool) public revokable;
    
    
    bytes32 public name;
    

    struct Transaction {
        address destination;
        uint value;
        bytes data;
        bool executed;
    }

    /*
     *  Modifiers
     */
    modifier isCreator(){
        creator == tx.origin;
        _;
    }
     
    modifier onlyWallet() {
        require(msg.sender == address(this));
        _;
    }
    
    modifier onlyOwner() {
        require(isOwner[msg.sender] || msg.sender == address(this));
        _;
    }
    
    modifier tokenDoesNotExist(bytes32 token) {
        require(!hasToken[token]);
        _;
    }
    
    modifier tokenExists(bytes32 token) {
        require(hasToken[token]);
        _;
    }

    modifier ownerDoesNotExist(address owner) {
        require(!isOwner[owner]);
        _;
    }

    modifier ownerExists(address owner) {
        require(isOwner[owner]);
        _;
    }

    modifier transactionExists(uint transactionId) {
        require(transactions[transactionId].destination != address(0));
        _;
    }

    modifier confirmed(uint transactionId, address owner) {
        require(confirmations[transactionId][owner]);
        _;
    }

    modifier notConfirmed(uint transactionId, address owner) {
        require(!confirmations[transactionId][owner]);
        _;
    }
    
    modifier isConfirmable(uint transactionId){
         require(confirmable[transactionId]);
        _;
    }

    modifier notExecuted(uint transactionId) {
        require(!transactions[transactionId].executed);
        _;
    }

    modifier notNull(address _address) {
        require(_address != address(0x0));
        _;
    }

    modifier validRequirement(uint ownerCount, uint _required) {
        require(ownerCount <= MAX_OWNER_COUNT
            && _required <= ownerCount
            && _required != 0
            && ownerCount != 0);
        _;
    }

    /// @dev Fallback function allows to deposit ether.
    fallback() external
        payable
    {
        if (msg.value > 0)
            emit Deposit(msg.sender, msg.value);
    }


    receive() external
        payable
    {
        if (msg.value > 0)
            emit Receive(msg.sender, msg.value, 1);
         
    }
     
     
    /*
     * Public functions
     */
    /// @dev Contract constructor sets initial owners and required number of confirmations.
    /// @param _owners List of initial owners.
    /// @param _required Number of required confirmations.
    constructor(address[] memory _owners, uint _required)
        public
        validRequirement(_owners.length, _required)
    {
        for (uint i=0; i<_owners.length; i++) {
            require(!isOwner[_owners[i]] && _owners[i] != address(0x0));
            isOwner[_owners[i]] = true;
        }
        owners = _owners;
        required = _required;
        version = 'W0.0.1';
    }
    function getContractVersion() external view returns (bytes32) {
        return version;
    }

    

    ///Token functions
    function addToken(bytes32 tkname, bytes32 tklink, address token)
        public
        //onlyWallet
        onlyOwner
        tokenDoesNotExist(tkname)
        notNull(token)
    {
        //tokens.push(token);
        
        Token memory newToken = Token(tkname, tklink, token, true);
        tokens[tkname] = newToken;
        tokenNames.push(tkname);
        hasToken[tkname] = true;

        //emit TokenAddition(token);
        emit TokenAddition(tkname, tklink, token);
    }
    
    function getTokens()
        public
        view
        returns(bytes32[] memory)
    {
        //return tokens;
        return tokenNames;
    }
    
    function removeToken(bytes32 tkname)
        public
        //onlyWallet
        onlyOwner
        tokenExists(tkname)
    {
        ///!!!withdraw balance before removing!!!!/// or hide the balance in Token contract
        
        // hasToken[token] = false;
        // for (uint i=0; i<tokens.length - 1; i++)
        //     if (tokens[i] == token) {
        //         tokens[i] = tokens[tokens.length - 1];
        //         break;
        //     }
        // tokens.length -= 1;
        // emit OwnerRemoval(token);
        
        hasToken[tkname] = false;
        emit TokenRemoval(tkname, tokens[tkname].tklink, tokens[tkname].tokenAddress);
        
        delete tokens[tkname];
    }


    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.
    /// @param owner Address of new owner.
    function addOwner(address owner)
        public
        //onlyWallet
        onlyOwner
        ownerDoesNotExist(owner)
        notNull(owner)
        validRequirement(owners.length + 1, required)
    {
        isOwner[owner] = true;
        owners.push(owner);
        emit OwnerAddition(owner);
    }
    

    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.
    /// @param owner Address of owner.
    function removeOwner(address owner)
        public
        //onlyWallet
        onlyOwner
        ownerExists(owner)
    {
        isOwner[owner] = false;
        for (uint i=0; i<owners.length - 1; i++)
            if (owners[i] == owner) {
                owners[i] = owners[owners.length - 1];
                break;
            }
        //owners.length -= 1;
        owners.pop();
        
        if (required > owners.length)
            changeRequirement(owners.length);
        emit OwnerRemoval(owner);
    }

    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
    /// @param owner Address of owner to be replaced.
    /// @param newOwner Address of new owner.
    function replaceOwner(address owner, address newOwner)
        public
        //onlyWallet
        onlyOwner
        ownerExists(owner)
        ownerDoesNotExist(newOwner)
    {
        for (uint i=0; i<owners.length; i++)
            if (owners[i] == owner) {
                owners[i] = newOwner;
                break;
            }
        isOwner[owner] = false;
        isOwner[newOwner] = true;
        emit OwnerRemoval(owner);
        emit OwnerAddition(newOwner);
    }

    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.
    /// @param _required Number of required confirmations.
    function changeRequirement(uint _required)
        public
        //onlyWallet
        onlyOwner
        validRequirement(owners.length, _required)
    {
        required = _required;
        emit RequirementChange(_required);
    }

    /// @dev Allows an owner to submit and confirm a transaction.
    /// @param destination Transaction target address.
    /// @param value Transaction ether value.
    /// @param data Transaction data payload.
    /// @return transactionId transaction ID.
    function submitTransaction(address destination, uint value, bytes memory data)
        public
        returns (uint transactionId)
    {
        transactionId = addTransaction(destination, value, data);

        emit Submission(transactionId);

        confirmable[transactionId] = true;
        //confirmTransaction(transactionId);
    }
    
    function submitTransaction(address destination, uint value, bytes memory data, bool batchHead, uint transId, bool isTradeB)
        public
        returns (uint transactionId)
    // function submitTransaction(address destination, uint value, bytes calldata data, bool batchHead, uint transId, bool isTradeB)
    //     external
    //     returns (uint transactionId)
    {
        emit Print(batchHead, transId);
        
        if (isTradeB){
            if (batchHead && transId == 0){        
                transactionId = addTransaction(destination, value, data);
                confirmable[transId] = false;
                // isPaired[transId] = false;
                emit Print("TID", transactionId);
                
                isTrade[transactionId] = isTradeB;
                
            }
            else{
                addTransaction(destination, value, data, transId);
            }
            
            if (batchHead && transId != 0){  
                confirmable[transId] = true;
                //confirmTransaction(transId);
            }
        }else{
            transactionId = submitTransaction(destination,value,data);
        }
        
    }

    function setTraderInfo(uint myTransId, MultiSigWallet trader, uint traderTransactionId)
        public
//        isCreator()
    {
        if (!isPaired[myTransId]){
            tradePairAddress[myTransId] = trader;
            tradePairId[myTransId] = traderTransactionId;
            
            
            isPaired[myTransId] = true;
            emit PairedWith(myTransId, trader, traderTransactionId);
        }else{
            emit HadPairedWith(myTransId, trader, traderTransactionId);
        }
        
        
        
        // confirmTransaction(myTransId);
    }


    /// @dev Allows an owner to confirm a transaction.
    /// @param transactionId Transaction ID.
    function confirmTransaction(uint transactionId)
        public
        ownerExists(msg.sender)
        transactionExists(transactionId)
        notConfirmed(transactionId, msg.sender)
        isConfirmable(transactionId)
    {
        confirmations[transactionId][msg.sender] = true;
        revokable[transactionId] = true;
        emit Confirmation(msg.sender, transactionId);
        
        //if (!isTrade[transactionId])
             executeTransaction(transactionId);
        // else
        // {
        //     // if (isPaired[transactionId])
        //      if (isConfirmed(transactionId) && tradePairAddress[transactionId].isConfirmed(tradePairId[transactionId])){
        //         executeTransaction(transactionId);
        //         tradePairAddress[transactionId].executeTransaction(tradePairId[transactionId], true);
        //      }
        // }
    }

    /// @dev Allows an owner to revoke a confirmation for a transaction.
    /// @param transactionId Transaction ID.
    function revokeConfirmation(uint transactionId)
        public
        ownerExists(msg.sender)
        confirmed(transactionId, msg.sender)
        notExecuted(transactionId)
    {
        if (revokable[transactionId]){
            confirmations[transactionId][msg.sender] = false;
            emit Revocation(msg.sender, transactionId);
        }else{
            emit Revocation(msg.sender, 0);
        }
    }



    /// @dev Allows anyone to execute a confirmed transaction.
    /// @param transactionId Transaction ID.
    function executeTransaction(uint transactionId)
        public
        ownerExists(msg.sender)
        confirmed(transactionId, msg.sender)
        notExecuted(transactionId)
    {
        if (isConfirmed(transactionId)) {
            
            if (isTrade[transactionId] && (!tradePairAddress[transactionId].isConfirmed(tradePairId[transactionId])))
                return;
            
            revokable[transactionId] = false;
            
            Transaction storage txn = transactions[transactionId];
            txn.executed = true;

             if (external_call(txn.destination, txn.value, txn.data.length, txn.data)){
                 emit Execution(transactionId);
                
                if (currentTC[transactionId] >= 1){
                    for(uint i = 0; i < currentTC[transactionId] && i < MAX_SUBTRAN_COUNT; i++){
                        Transaction storage txnB = transactionBatch[transactionId][i];
                        if (external_call(txnB.destination, txnB.value, txnB.data.length, txnB.data)){
                            emit Execution(transactionId);
                            emit Print(i);
                            emit Print(txnB.destination, txnB.value);

                        }
                        else {
                            emit ExecutionFailure(transactionId);
                            txn.executed = false;
                            
                            require(false);
                        }
                    }
                    
                    currentTC[transactionId] = 0;
                }
                
                if (isTrade[transactionId] && (tradePairAddress[transactionId].isConfirmed(tradePairId[transactionId])))
                    tradePairAddress[transactionId].executeTransaction(tradePairId[transactionId], true);
            }
            else {
                emit ExecutionFailure(transactionId);
                txn.executed = false;
                
                require(false);
            }
        }
    }
    
    function executeTransaction(uint transactionId, bool wakeup)
        public
        //ownerExists(msg.sender)
        //confirmed(transactionId, msg.sender)
        notExecuted(transactionId)
    {
        if (wakeup){
            emit Print("WB", msg.sender);   
            
            emit Print("WB1", tradePairAddress[transactionId]);   
            emit Print("WB2", MultiSigWallet(msg.sender));   
            emit Print("WB3", (tradePairAddress[transactionId] != MultiSigWallet(msg.sender)));   
            
            if (tradePairAddress[transactionId] != MultiSigWallet(msg.sender))
                require(false);
        }
        
        if (isConfirmed(transactionId)) {
            Transaction storage txn = transactions[transactionId];
            txn.executed = true;

            // Transaction storage txnB = transactionBatch[transactionId][0];
             if (external_call(txn.destination, txn.value, txn.data.length, txn.data)){
                 emit Execution(transactionId);
                
                    if (currentTC[transactionId] >= 1){
                        for(uint i = 0; i < currentTC[transactionId] && i < MAX_SUBTRAN_COUNT; i++){
                            Transaction storage txnB = transactionBatch[transactionId][i];
                            if (external_call(txnB.destination, txnB.value, txnB.data.length, txnB.data)){
                                emit Execution(transactionId);
                                emit Print(i);
                                emit Print(txnB.destination, txnB.value);
    
                            }
                            else {
                                emit ExecutionFailure(transactionId);
                                txn.executed = false;
                                
                                require(false);
                            }
                        }
                        
                        currentTC[transactionId] = 0;
                    }
                
            }
            else {
                emit ExecutionFailure(transactionId);
                txn.executed = false;
                
                require(false);
            }
        }
    }

    event __print(string ok);
    event __print(address dest);
    event __print(uint dataLength);
    event __print(bytes data);
    
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function external_call(address destination, uint value, uint dataLength, bytes memory data) internal returns (bool) {
        emit __print(string("999999999999999999999"));
        emit __print(destination);
        emit __print(dataLength);
        emit __print(data);
        emit __print(string("888888888888888888888"));

        uint256 gasL = gasleft();
        
        bool result;
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gasL, 34710),   // 34710 is the value that solidity is currently emitting
                                  // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                  // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                d,
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
        return result;
    }

    /// @dev Returns the confirmation status of a transaction.
    /// @param transactionId Transaction ID.
    /// @return Confirmation status.
    function isConfirmed(uint transactionId)
        public
        view
        returns (bool)
    {
        uint count = 0;
        for (uint i=0; i<owners.length; i++) {
            if (confirmations[transactionId][owners[i]])
                count += 1;
            if (count == required)
                return true;
        }
    }

    /*
     * Internal functions
     */
    
    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.
    /// @param destination Transaction target address.
    /// @param value Transaction ether value.
    /// @param data Transaction data payload.
    /// @return transactionId transaction ID.
    function addTransaction(address destination, uint value, bytes memory data)
        internal
        notNull(destination)
        returns (uint transactionId)
    {
        transactionId = transactionCount;

        // if (currentTC[transactionId] == 0){
            transactions[transactionId] = Transaction({
                destination: destination,
                value: value,
                data: data,
                executed: false
            });
            transactionCount += 1;
        // }
        // else{

        //     transactionBatch[transactionId][currentTC[transactionId]] = Transaction({
        //         destination: destination,
        //         value: value,
        //         data: data,
        //         executed: false
        //     });
        //     currentTC[transactionId] += 1;
        
        // }
       
        
        emit Submission(transactionId);
    }
    
    function addTransaction(address destination, uint value, bytes memory data, uint transId)
        internal
        notNull(destination)
        returns (uint transactionId)
    {
        if (transId == 0)
            transactionId = transactionCount;
        else
            transactionId = transId;



        // if (currentTC[transactionId] == 0){
        //     transactions[transactionId] = Transaction({
        //         destination: destination,
        //         value: value,
        //         data: data,
        //         executed: false
        //     });
        //     transactionCount += 1;
        // }
        // else{

            transactionBatch[transactionId][currentTC[transactionId]] = Transaction({
                destination: destination,
                value: value,
                data: data,
                executed: false
            });
            currentTC[transactionId] += 1;
        
        // }
       
        
        
        
        emit Submission(transactionId);
        emit SubmissionSubTransaction(currentTC[transactionId]);
    }
    
    

     function trade(address _from, bytes memory _name, uint _value, bytes memory _commissionName, uint _cvalue,
                    address to_, bytes memory name_, uint value_, bytes memory commissionName_, uint cvalue_)
        internal
        notNull(_from)
        notNull(to_)
    {
            
    }

    /*
     * Web3 call functions
     */
    /// @dev Returns number of confirmations of a transaction.
    /// @param transactionId Transaction ID.
    /// @return count Number of confirmations.
    function getConfirmationCount(uint transactionId)
        public
        view
        returns (uint count)
    {
        for (uint i=0; i<owners.length; i++)
            if (confirmations[transactionId][owners[i]])
                count += 1;
    }

    /// @dev Returns total number of transactions after filers are applied.
    /// @param pending Include pending transactions.
    /// @param executed Include executed transactions.
    /// @return count Total number of transactions after filters are applied.
    function getTransactionCount(bool pending, bool executed)
        public
        view
        returns (uint count)
    {
        for (uint i=0; i<transactionCount; i++)
            if (   pending && !transactions[i].executed
                || executed && transactions[i].executed)
                count += 1;
    }

    /// @dev Returns list of owners.
    /// @return List of owner addresses.
    function getOwners()
        public
        view
        returns (address[] memory)
    {
        return owners;
    }
    
    function getOwner(uint256 i)
        public
        view
        returns (address)
    {
        return owners[i];
    }
    
    function getOwnerNumber()
        public
        view
        returns (uint256)
    {
        return owners.length;
    }

    /// @dev Returns array with owner addresses, which confirmed transaction.
    /// @param transactionId Transaction ID.
    /// @return _confirmations Returns array of owner addresses?.
    function getConfirmations(uint transactionId)
        public
        view
        returns (address[] memory _confirmations)
    {
        address[] memory confirmationsTemp = new address[](owners.length);
        uint count = 0;
        uint i;
        for (i=0; i<owners.length; i++)
            if (confirmations[transactionId][owners[i]]) {
                confirmationsTemp[count] = owners[i];
                count += 1;
            }
        _confirmations = new address[](count);
        for (i=0; i<count; i++)
            _confirmations[i] = confirmationsTemp[i];
    }

    /// @dev Returns list of transaction IDs in defined range.
    /// @param from Index start position of transaction array.
    /// @param to Index end position of transaction array.
    /// @param pending Include pending transactions.
    /// @param executed Include executed transactions.
    /// @return _transactionIds array of transaction IDs.
    function getTransactionIds(uint from, uint to, bool pending, bool executed)
        public
        view
        returns (uint[] memory _transactionIds)
    {
        uint[] memory transactionIdsTemp = new uint[](transactionCount);
        uint count = 0;
        uint i;
        for (i=0; i<transactionCount; i++)
            if (   pending && !transactions[i].executed
                || executed && transactions[i].executed)
            {
                transactionIdsTemp[count] = i;
                count += 1;
            }
        _transactionIds = new uint[](to - from);
        for (i=from; i<to; i++)
            _transactionIds[i - from] = transactionIdsTemp[i];
    }
}




